//! Parser for the `cryo` language.
//!
//! A parser turns intermediate tokens generated by the lexer into an AST (Abstract Syntax Tree), which is then used in further operations such as type analysis and IR generation.
#![feature(array_try_from_fn)]
#![feature(generic_const_exprs)]
#![allow(private_bounds, private_interfaces, incomplete_features)]

pub mod atoms;
pub mod expr;
pub mod ident;
pub mod item;
pub mod stmt;

#[cfg(test)]
mod test_util;

use cryo_lexer::{
    Symbol,
    stream::{Guard, StreamLike, TokenStream, TokenStreamError},
};
use cryo_span::{Span, Spanned};
use derive_more::From;

type ParseResult<T> = Result<T, ParseError>;

/// Fatal errors that can occur when parsing.
#[derive(From, Debug, PartialEq, Eq)]
pub enum ParseError {
    /// The token stream returned an error.
    TokenStreamError(TokenStreamError),
    /// A keyword is missing.
    MissingKw(Symbol),
}

trait Parse: Sized {
    fn parse(tokens: &mut Guard) -> ParseResult<Self>;
}

impl<T: Parse> Parse for Vec<T> {
    fn parse(tokens: &mut Guard) -> ParseResult<Self> {
        let mut buf = vec![];

        while let Ok(v) = tokens.with(T::parse) {
            buf.push(v);
        }

        Ok(buf)
    }
}

/// A series of `T` punctuated by `P`. The last `T` does not have to be followed by `P`, in which case the `inner` field will be empty and the `T` will be stored in `last`.
#[derive(Debug, PartialEq, Eq)]
pub struct Punctuated<T, P> {
    /// The series of `T` followed by `P`.
    pub inner: Vec<(T, P)>,
    /// The last `T`, which does not have to be followed by a `P`. If it were followed by `P`, it would be stored in `inner`.
    pub last: Option<Box<T>>,
}

impl<T: Parse, P: Parse> Parse for Punctuated<T, P> {
    fn parse(tokens: &mut Guard) -> ParseResult<Self> {
        let mut inner = vec![];
        let mut last = None;

        while let Ok(t) = tokens.with(T::parse) {
            match tokens.with(P::parse) {
                Ok(p) => inner.push((t, p)),
                Err(_) => {
                    last.replace(Box::new(t));
                    break;
                }
            }
        }

        Ok(Self { inner, last })
    }
}

/// Parse a `T` from a stream or a guard.
pub fn parse<T>(stream: &mut impl StreamLike) -> ParseResult<T>
where
    T: Parse,
{
    stream.with(T::parse)
}

/// The parser.
pub struct Parser {
    stream: TokenStream,
}

impl Parser {
    /// Parse a `T`, except that the parser will span the result according to the tokens that the parsing function consumed.
    pub fn spanning<T>(&mut self) -> Result<Spanned<T>, ParseError>
    where
        T: Parse,
    {
        let cursor_before = self.stream.cursor();
        let result = self.stream.with(T::parse)?;
        let final_span = self.stream.all()[cursor_before..self.stream.cursor()]
            .iter()
            .fold(Span::ZERO, |b, token| b + token.span);

        Ok(Spanned::new(result, final_span))
    }
}
